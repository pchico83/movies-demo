---

apiVersion: v1
kind: Service
metadata:
  name: movies-api
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: movies-api
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: movies-api
  annotations:
    dev.okteto.com/repository: https://github.com/pchico83/movies-demo
    dev.okteto.com/path: api/okteto.yml
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: movies-api
  template:
    metadata:
      labels:
        app.kubernetes.io/name: movies-api
    spec:
      terminationGracePeriodSeconds: 0
      initContainers:
        - name: movies
          image: ramiro/movies-api
          command:
            - yarn
            - load
          imagePullPolicy: Always
          env:
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongodb
                  key: mongodb-password
            - name: MONGODB_USERNAME
              value: okteto
            - name: MONGODB_DATABASE
              value: okteto
            - name: MONGODB_HOST
              value: mongodb
      containers:
        - name: api
          image: ramiro/movies-api
          imagePullPolicy: Always
          env:
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongodb
                  key: mongodb-password
            - name: MONGODB_USERNAME
              value: okteto
            - name: MONGODB_DATABASE
              value: okteto
            - name: MONGODB_HOST
              value: mongodb
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /api/healthz
              port: 8080
          readinessProbe:
            httpGet:
              path: /api/healthz
              port: 8080

---

apiVersion: v1
kind: Secret
metadata:
  name: mongodb
type: Opaque
data:
  mongodb-root-password: "QnhRMkxjcXVsMQ=="
  mongodb-password:  "b2t0ZXRv"
---

apiVersion: v1
kind: Service
metadata:
  name: mongodb
spec:
  type: ClusterIP
  ports:
  - name: mongodb
    port: 27017
    targetPort: mongodb
  selector:
    app: mongodb
---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
spec:
  serviceName: mongodb
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      securityContext:
        fsGroup: 1001      
      initContainers:
      containers:
      - name: mongodb
        image: docker.io/bitnami/mongodb:4.0.12-debian-9-r43
        imagePullPolicy: "IfNotPresent"
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
        env:
        - name: MONGODB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb
              key: mongodb-password
        - name: MONGODB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb
              key: mongodb-root-password
        - name: MONGODB_USERNAME
          value: "okteto"
        - name: MONGODB_SYSTEM_LOG_VERBOSITY
          value: "0"
        - name: MONGODB_DISABLE_SYSTEM_LOG
          value: "no"
        - name: MONGODB_DATABASE
          value: "okteto"
        - name: MONGODB_ENABLE_IPV6
          value: "no"
        - name: MONGODB_ENABLE_DIRECTORY_PER_DB
          value: "no"
        ports:
        - name: mongodb
          containerPort: 27017
        volumeMounts:
        - name: data
          mountPath: /bitnami/mongodb
          subPath: 
        resources:
          {}
      volumes:
      - name: data
        emptyDir: {}

--- 

apiVersion: v1
kind: Service
metadata:
  name: movies-frontend
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: movies-frontend
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: movies-frontend
  annotations:
    dev.okteto.com/repository: https://github.com/pchico83/movies-demo
    dev.okteto.com/path: frontend/okteto.yml
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: movies-frontend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: movies-frontend
    spec:
      terminationGracePeriodSeconds: 0
      containers:
        - name: frontend
          image: ramiro/movies-frontend
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: movies
  annotations:
    dev.okteto.com/generate-host: "true"
spec:
  rules:
    - http:
        paths:
          - path: /api
            backend:
              serviceName: movies-api
              servicePort: 8080
          - path: /
            backend:
              serviceName: movies-frontend
              servicePort: 80
